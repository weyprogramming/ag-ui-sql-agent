/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/dashboard-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Dashboards */
        get: operations["get_dashboards_api_dashboard_config_get"];
        put?: never;
        /** Create Dashboard Config */
        post: operations["create_dashboard_config_api_dashboard_config_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard-config/evaluate-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Evaluate Dashboard Config From State */
        post: operations["evaluate_dashboard_config_from_state_api_dashboard_config_evaluate_state_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/state/{state_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Agent State */
        get: operations["get_agent_state_api_state__state_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sql-dependency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get All Sql Dependencies */
        get: operations["get_all_sql_dependencies_api_sql_dependency_get"];
        put?: never;
        /** Create Sql Dependency */
        post: operations["create_sql_dependency_api_sql_dependency_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sql-dependency/{dependency_pk}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Sql Dependency */
        get: operations["get_sql_dependency_api_sql_dependency__dependency_pk__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run Agent */
        post: operations["run_agent__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BarChartConfig */
        BarChartConfig: {
            /**
             * X
             * @description The column name(s) to use for the x-axis
             */
            x?: string | string[] | null;
            /**
             * Y
             * @description The column name(s) to use for the y-axis
             */
            y?: string | string[] | null;
            /**
             * Color
             * @description Column name for color encoding
             */
            color?: string | null;
            /**
             * Pattern Shape
             * @description Column name for pattern shape encoding
             */
            pattern_shape?: string | null;
            /**
             * Facet Row
             * @description Column name for facet rows
             */
            facet_row?: string | null;
            /**
             * Facet Col
             * @description Column name for facet columns
             */
            facet_col?: string | null;
            /**
             * Facet Col Wrap
             * @description Maximum number of facet columns
             * @default 0
             */
            facet_col_wrap: number;
            /**
             * Facet Row Spacing
             * @description Spacing between facet rows
             */
            facet_row_spacing?: number | null;
            /**
             * Facet Col Spacing
             * @description Spacing between facet columns
             */
            facet_col_spacing?: number | null;
            /**
             * Hover Name
             * @description Column name for hover name
             */
            hover_name?: string | null;
            /**
             * Hover Data
             * @description Columns to show in hover tooltip
             */
            hover_data?: string[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Custom Data
             * @description Custom data columns
             */
            custom_data?: string[] | null;
            /**
             * Text
             * @description Column name for text labels
             */
            text?: string | null;
            /**
             * Base
             * @description Column name for base values
             */
            base?: string | null;
            /**
             * Error X
             * @description Column name for x error bars
             */
            error_x?: string | null;
            /**
             * Error X Minus
             * @description Column name for x error bars (minus)
             */
            error_x_minus?: string | null;
            /**
             * Error Y
             * @description Column name for y error bars
             */
            error_y?: string | null;
            /**
             * Error Y Minus
             * @description Column name for y error bars (minus)
             */
            error_y_minus?: string | null;
            /**
             * Animation Frame
             * @description Column name for animation frames
             */
            animation_frame?: string | null;
            /**
             * Animation Group
             * @description Column name for animation groups
             */
            animation_group?: string | null;
            /**
             * Category Orders
             * @description Dictionary of category orders
             */
            category_orders?: {
                [key: string]: unknown;
            } | null;
            /**
             * Labels
             * @description Dictionary of axis labels
             */
            labels?: {
                [key: string]: unknown;
            } | null;
            /**
             * Color Discrete Sequence
             * @description Sequence of discrete colors
             */
            color_discrete_sequence?: string[] | null;
            /**
             * Color Discrete Map
             * @description Mapping of values to colors
             */
            color_discrete_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Color Continuous Scale
             * @description Continuous color scale
             */
            color_continuous_scale?: unknown[] | string | null;
            /**
             * Pattern Shape Sequence
             * @description Sequence of pattern shapes
             */
            pattern_shape_sequence?: string[] | null;
            /**
             * Pattern Shape Map
             * @description Mapping of values to pattern shapes
             */
            pattern_shape_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Range Color
             * @description Range of color scale
             */
            range_color?: unknown[] | null;
            /**
             * Color Continuous Midpoint
             * @description Midpoint of color scale
             */
            color_continuous_midpoint?: number | null;
            /**
             * Opacity
             * @description Opacity of bars
             */
            opacity?: number | null;
            /**
             * Orientation
             * @description Orientation ('v' or 'h')
             */
            orientation?: string | null;
            /**
             * Barmode
             * @description Bar mode ('relative', 'group', 'overlay', 'stack')
             * @default relative
             */
            barmode: string;
            /**
             * Log X
             * @description Use log scale for x-axis
             * @default false
             */
            log_x: boolean;
            /**
             * Log Y
             * @description Use log scale for y-axis
             * @default false
             */
            log_y: boolean;
            /**
             * Range X
             * @description Range for x-axis
             */
            range_x?: unknown[] | null;
            /**
             * Range Y
             * @description Range for y-axis
             */
            range_y?: unknown[] | null;
            /**
             * Text Auto
             * @description Automatic text labels
             * @default false
             */
            text_auto: boolean | string;
            /**
             * Title
             * @description Chart title
             */
            title?: string | null;
            /**
             * Subtitle
             * @description Chart subtitle
             */
            subtitle?: string | null;
            /**
             * Template
             * @description Plotly template
             */
            template?: string | null;
            /**
             * Width
             * @description Chart width in pixels
             */
            width?: number | null;
            /**
             * Height
             * @description Chart height in pixels
             */
            height?: number | null;
        };
        /** BoxChartConfig */
        BoxChartConfig: {
            /**
             * X
             * @description The column name to use for the x-axis
             */
            x?: string | null;
            /**
             * Y
             * @description The column name to use for the y-axis
             */
            y?: string | null;
            /**
             * Color
             * @description Column name for color encoding
             */
            color?: string | null;
            /**
             * Facet Row
             * @description Column name for facet rows
             */
            facet_row?: string | null;
            /**
             * Facet Col
             * @description Column name for facet columns
             */
            facet_col?: string | null;
            /**
             * Facet Col Wrap
             * @description Maximum number of facet columns
             * @default 0
             */
            facet_col_wrap: number;
            /**
             * Facet Row Spacing
             * @description Spacing between facet rows
             */
            facet_row_spacing?: number | null;
            /**
             * Facet Col Spacing
             * @description Spacing between facet columns
             */
            facet_col_spacing?: number | null;
            /**
             * Hover Name
             * @description Column name for hover name
             */
            hover_name?: string | null;
            /**
             * Hover Data
             * @description Columns to show in hover tooltip
             */
            hover_data?: string[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Custom Data
             * @description Custom data columns
             */
            custom_data?: string[] | null;
            /**
             * Animation Frame
             * @description Column name for animation frames
             */
            animation_frame?: string | null;
            /**
             * Animation Group
             * @description Column name for animation groups
             */
            animation_group?: string | null;
            /**
             * Category Orders
             * @description Dictionary of category orders
             */
            category_orders?: {
                [key: string]: unknown;
            } | null;
            /**
             * Labels
             * @description Dictionary of axis labels
             */
            labels?: {
                [key: string]: unknown;
            } | null;
            /**
             * Color Discrete Sequence
             * @description Sequence of discrete colors
             */
            color_discrete_sequence?: string[] | null;
            /**
             * Color Discrete Map
             * @description Mapping of values to colors
             */
            color_discrete_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Orientation
             * @description Orientation ('v' or 'h')
             */
            orientation?: string | null;
            /**
             * Boxmode
             * @description Box mode ('group' or 'overlay')
             */
            boxmode?: string | null;
            /**
             * Log X
             * @description Use log scale for x-axis
             * @default false
             */
            log_x: boolean;
            /**
             * Log Y
             * @description Use log scale for y-axis
             * @default false
             */
            log_y: boolean;
            /**
             * Range X
             * @description Range for x-axis
             */
            range_x?: unknown[] | null;
            /**
             * Range Y
             * @description Range for y-axis
             */
            range_y?: unknown[] | null;
            /**
             * Points
             * @description Show points ('all', 'outliers', 'suspectedoutliers', False)
             */
            points?: string | null;
            /**
             * Notched
             * @description Show notched boxes
             * @default false
             */
            notched: boolean;
            /**
             * Title
             * @description Chart title
             */
            title?: string | null;
            /**
             * Subtitle
             * @description Chart subtitle
             */
            subtitle?: string | null;
            /**
             * Template
             * @description Plotly template
             */
            template?: string | null;
            /**
             * Width
             * @description Chart width in pixels
             */
            width?: number | null;
            /**
             * Height
             * @description Chart height in pixels
             */
            height?: number | null;
        };
        /** DashboardConfigModel */
        DashboardConfigModel: {
            /** Pk */
            pk?: string | null;
            dashboard_sql_query?: components["schemas"]["DashboardSQLQueryModel"] | null;
            /** Chart Config */
            chart_config?: components["schemas"]["BoxChartConfig"] | components["schemas"]["ScatterChartConfig"] | components["schemas"]["PieChartConfig"] | components["schemas"]["LineChartConfig"] | components["schemas"]["HistogramChartConfig"] | components["schemas"]["BarChartConfig"] | null;
        } & {
            [key: string]: unknown;
        };
        /** DashboardConfigState */
        "DashboardConfigState-Input": {
            dashboard_sql_query?: components["schemas"]["DashboardSQLQueryState"] | null;
            /** Chart Config */
            chart_config?: components["schemas"]["BoxChartConfig"] | components["schemas"]["ScatterChartConfig"] | components["schemas"]["PieChartConfig"] | components["schemas"]["LineChartConfig"] | components["schemas"]["HistogramChartConfig"] | components["schemas"]["BarChartConfig"] | null;
        };
        /** DashboardConfigState */
        "DashboardConfigState-Output": {
            dashboard_sql_query?: components["schemas"]["DashboardSQLQueryState"] | null;
            /** Chart Config */
            chart_config?: components["schemas"]["BoxChartConfig"] | components["schemas"]["ScatterChartConfig"] | components["schemas"]["PieChartConfig"] | components["schemas"]["LineChartConfig"] | components["schemas"]["HistogramChartConfig"] | components["schemas"]["BarChartConfig"] | null;
        };
        /** DashboardEvaluationRequest */
        "DashboardEvaluationRequest-Input": {
            dashboard_evaluation_sql_query: components["schemas"]["DashboardEvaluationSQLQuery-Input"];
            /** Chart Config */
            chart_config: components["schemas"]["BoxChartConfig"] | components["schemas"]["ScatterChartConfig"] | components["schemas"]["PieChartConfig"] | components["schemas"]["LineChartConfig"] | components["schemas"]["HistogramChartConfig"] | components["schemas"]["BarChartConfig"];
        };
        /** DashboardEvaluationRequest */
        "DashboardEvaluationRequest-Output": {
            dashboard_evaluation_sql_query: components["schemas"]["DashboardEvaluationSQLQuery-Output"];
            /** Chart Config */
            chart_config: components["schemas"]["BoxChartConfig"] | components["schemas"]["ScatterChartConfig"] | components["schemas"]["PieChartConfig"] | components["schemas"]["LineChartConfig"] | components["schemas"]["HistogramChartConfig"] | components["schemas"]["BarChartConfig"];
        };
        /** DashboardEvaluationResponse */
        DashboardEvaluationResponse: {
            dashboard_evaluation_request: components["schemas"]["DashboardEvaluationRequest-Output"];
            data_frame: components["schemas"]["PandasDataFrame"];
            figure: components["schemas"]["PlotlyFigure"];
        };
        /** DashboardEvaluationSQLQuery */
        "DashboardEvaluationSQLQuery-Input": {
            /** Sql Dependency Id */
            sql_dependency_id: string;
            /** Parametrized Query */
            parametrized_query: string;
            /** Dashboard Sql Query Parameter Values */
            dashboard_sql_query_parameter_values: components["schemas"]["DashboardSQLQueryParameterValue"][];
        };
        /** DashboardEvaluationSQLQuery */
        "DashboardEvaluationSQLQuery-Output": {
            /** Sql Dependency Id */
            sql_dependency_id: string;
            /** Parametrized Query */
            parametrized_query: string;
            /** Dashboard Sql Query Parameter Values */
            dashboard_sql_query_parameter_values: components["schemas"]["DashboardSQLQueryParameterValue"][];
        };
        /** DashboardSQLQueryModel */
        DashboardSQLQueryModel: {
            /**
             * Parametrized Query
             * @description A parametrized SQL query with parameters in curly braces, e.g. SELECT * FROM table WHERE column = {parameter}
             */
            parametrized_query: string;
            /**
             * Dashboard Sql Query Parameters
             * @description A list of parameters used in the parametrized_query
             */
            dashboard_sql_query_parameters: components["schemas"]["DashboardSQLQueryParameter"][];
            /** Sql Dependency Id */
            sql_dependency_id: string;
        };
        /** DashboardSQLQueryParameter */
        DashboardSQLQueryParameter: {
            /**
             * Name
             * @description The name of the parameter, e.g. 'parameter' for {parameter}
             */
            name: string;
            /**
             * Type
             * @description The type of the parameter, e.g. 'str', 'int', 'float', 'date', 'bool', 'datetime', or 'time'
             * @enum {string}
             */
            type: "str" | "int" | "float" | "date" | "bool" | "datetime" | "time";
            /**
             * Default Value
             * @description An example value for the parameter, e.g. 'example' for a str parameter
             */
            default_value: string | number | boolean;
        };
        /** DashboardSQLQueryParameterValue */
        DashboardSQLQueryParameterValue: {
            parameter: components["schemas"]["DashboardSQLQueryParameter"];
            /** Value */
            value: string | number | boolean;
        };
        /** DashboardSQLQueryState */
        DashboardSQLQueryState: {
            /**
             * Parametrized Query
             * @description A parametrized SQL query with parameters in curly braces, e.g. SELECT * FROM table WHERE column = {parameter}
             */
            parametrized_query: string;
            /**
             * Dashboard Sql Query Parameters
             * @description A list of parameters used in the parametrized_query
             */
            dashboard_sql_query_parameters: components["schemas"]["DashboardSQLQueryParameter"][];
            /** Sql Dependency Id */
            sql_dependency_id: string;
        };
        /** DashboardState */
        DashboardState: {
            /** @default {} */
            dashboard_config: components["schemas"]["DashboardConfigState-Output"];
            default_dataframe?: components["schemas"]["PandasDataFrame"] | null;
            default_figure?: components["schemas"]["PlotlyFigure"] | null;
            /** Selected Sql Dependency Id */
            selected_sql_dependency_id?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HistogramChartConfig */
        HistogramChartConfig: {
            /**
             * X
             * @description The column name to use for the x-axis
             */
            x?: string | null;
            /**
             * Y
             * @description The column name to use for the y-axis
             */
            y?: string | null;
            /**
             * Color
             * @description Column name for color encoding
             */
            color?: string | null;
            /**
             * Pattern Shape
             * @description Column name for pattern shape encoding
             */
            pattern_shape?: string | null;
            /**
             * Facet Row
             * @description Column name for facet rows
             */
            facet_row?: string | null;
            /**
             * Facet Col
             * @description Column name for facet columns
             */
            facet_col?: string | null;
            /**
             * Facet Col Wrap
             * @description Maximum number of facet columns
             * @default 0
             */
            facet_col_wrap: number;
            /**
             * Facet Row Spacing
             * @description Spacing between facet rows
             */
            facet_row_spacing?: number | null;
            /**
             * Facet Col Spacing
             * @description Spacing between facet columns
             */
            facet_col_spacing?: number | null;
            /**
             * Hover Name
             * @description Column name for hover name
             */
            hover_name?: string | null;
            /**
             * Hover Data
             * @description Columns to show in hover tooltip
             */
            hover_data?: string[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Animation Frame
             * @description Column name for animation frames
             */
            animation_frame?: string | null;
            /**
             * Animation Group
             * @description Column name for animation groups
             */
            animation_group?: string | null;
            /**
             * Category Orders
             * @description Dictionary of category orders
             */
            category_orders?: {
                [key: string]: unknown;
            } | null;
            /**
             * Labels
             * @description Dictionary of axis labels
             */
            labels?: {
                [key: string]: unknown;
            } | null;
            /**
             * Color Discrete Sequence
             * @description Sequence of discrete colors
             */
            color_discrete_sequence?: string[] | null;
            /**
             * Color Discrete Map
             * @description Mapping of values to colors
             */
            color_discrete_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Pattern Shape Sequence
             * @description Sequence of pattern shapes
             */
            pattern_shape_sequence?: string[] | null;
            /**
             * Pattern Shape Map
             * @description Mapping of values to pattern shapes
             */
            pattern_shape_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Marginal
             * @description Marginal plot type ('rug', 'box', 'violin', 'histogram')
             */
            marginal?: string | null;
            /**
             * Opacity
             * @description Opacity of bars
             */
            opacity?: number | null;
            /**
             * Orientation
             * @description Orientation ('v' or 'h')
             */
            orientation?: string | null;
            /**
             * Barmode
             * @description Bar mode ('relative', 'group', 'overlay', 'stack')
             * @default relative
             */
            barmode: string;
            /**
             * Barnorm
             * @description Bar normalization ('fraction', 'percent')
             */
            barnorm?: string | null;
            /**
             * Histnorm
             * @description Histogram normalization
             */
            histnorm?: string | null;
            /**
             * Log X
             * @description Use log scale for x-axis
             * @default false
             */
            log_x: boolean;
            /**
             * Log Y
             * @description Use log scale for y-axis
             * @default false
             */
            log_y: boolean;
            /**
             * Range X
             * @description Range for x-axis
             */
            range_x?: unknown[] | null;
            /**
             * Range Y
             * @description Range for y-axis
             */
            range_y?: unknown[] | null;
            /**
             * Histfunc
             * @description Histogram function ('count', 'sum', 'avg', etc.)
             */
            histfunc?: string | null;
            /**
             * Cumulative
             * @description Show cumulative histogram
             */
            cumulative?: boolean | null;
            /**
             * Nbins
             * @description Number of bins
             */
            nbins?: number | null;
            /**
             * Text Auto
             * @description Automatic text labels
             * @default false
             */
            text_auto: boolean | string;
            /**
             * Title
             * @description Chart title
             */
            title?: string | null;
            /**
             * Subtitle
             * @description Chart subtitle
             */
            subtitle?: string | null;
            /**
             * Template
             * @description Plotly template
             */
            template?: string | null;
            /**
             * Width
             * @description Chart width in pixels
             */
            width?: number | null;
            /**
             * Height
             * @description Chart height in pixels
             */
            height?: number | null;
        };
        /** LineChartConfig */
        LineChartConfig: {
            /**
             * X
             * @description The column name(s) to use for the x-axis
             */
            x?: string | string[] | null;
            /**
             * Y
             * @description The column name(s) to use for the y-axis
             */
            y?: string | string[] | null;
            /**
             * Line Group
             * @description Column name for line grouping
             */
            line_group?: string | null;
            /**
             * Color
             * @description Column name for color encoding
             */
            color?: string | null;
            /**
             * Line Dash
             * @description Column name for line dash encoding
             */
            line_dash?: string | null;
            /**
             * Symbol
             * @description Column name for symbol encoding
             */
            symbol?: string | null;
            /**
             * Hover Name
             * @description Column name for hover name
             */
            hover_name?: string | null;
            /**
             * Hover Data
             * @description Columns to show in hover tooltip
             */
            hover_data?: string[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Custom Data
             * @description Custom data columns
             */
            custom_data?: string[] | null;
            /**
             * Text
             * @description Column name for text labels
             */
            text?: string | null;
            /**
             * Facet Row
             * @description Column name for facet rows
             */
            facet_row?: string | null;
            /**
             * Facet Col
             * @description Column name for facet columns
             */
            facet_col?: string | null;
            /**
             * Facet Col Wrap
             * @description Maximum number of facet columns
             * @default 0
             */
            facet_col_wrap: number;
            /**
             * Facet Row Spacing
             * @description Spacing between facet rows
             */
            facet_row_spacing?: number | null;
            /**
             * Facet Col Spacing
             * @description Spacing between facet columns
             */
            facet_col_spacing?: number | null;
            /**
             * Error X
             * @description Column name for x error bars
             */
            error_x?: string | null;
            /**
             * Error X Minus
             * @description Column name for x error bars (minus)
             */
            error_x_minus?: string | null;
            /**
             * Error Y
             * @description Column name for y error bars
             */
            error_y?: string | null;
            /**
             * Error Y Minus
             * @description Column name for y error bars (minus)
             */
            error_y_minus?: string | null;
            /**
             * Animation Frame
             * @description Column name for animation frames
             */
            animation_frame?: string | null;
            /**
             * Animation Group
             * @description Column name for animation groups
             */
            animation_group?: string | null;
            /**
             * Category Orders
             * @description Dictionary of category orders
             */
            category_orders?: {
                [key: string]: unknown;
            } | null;
            /**
             * Labels
             * @description Dictionary of axis labels
             */
            labels?: {
                [key: string]: unknown;
            } | null;
            /**
             * Orientation
             * @description Orientation ('v' or 'h')
             */
            orientation?: string | null;
            /**
             * Color Discrete Sequence
             * @description Sequence of discrete colors
             */
            color_discrete_sequence?: string[] | null;
            /**
             * Color Discrete Map
             * @description Mapping of values to colors
             */
            color_discrete_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Line Dash Sequence
             * @description Sequence of line dash patterns
             */
            line_dash_sequence?: string[] | null;
            /**
             * Line Dash Map
             * @description Mapping of values to line dash patterns
             */
            line_dash_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Symbol Sequence
             * @description Sequence of symbols
             */
            symbol_sequence?: string[] | null;
            /**
             * Symbol Map
             * @description Mapping of values to symbols
             */
            symbol_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Markers
             * @description Show markers on lines
             * @default false
             */
            markers: boolean;
            /**
             * Log X
             * @description Use log scale for x-axis
             * @default false
             */
            log_x: boolean;
            /**
             * Log Y
             * @description Use log scale for y-axis
             * @default false
             */
            log_y: boolean;
            /**
             * Range X
             * @description Range for x-axis
             */
            range_x?: unknown[] | null;
            /**
             * Range Y
             * @description Range for y-axis
             */
            range_y?: unknown[] | null;
            /**
             * Line Shape
             * @description Line shape ('linear', 'spline', etc.)
             */
            line_shape?: string | null;
            /**
             * Render Mode
             * @description Render mode
             * @default auto
             */
            render_mode: string;
            /**
             * Title
             * @description Chart title
             */
            title?: string | null;
            /**
             * Subtitle
             * @description Chart subtitle
             */
            subtitle?: string | null;
            /**
             * Template
             * @description Plotly template
             */
            template?: string | null;
            /**
             * Width
             * @description Chart width in pixels
             */
            width?: number | null;
            /**
             * Height
             * @description Chart height in pixels
             */
            height?: number | null;
        };
        /** PandasDataFrame */
        PandasDataFrame: {
            /** Data */
            data: unknown[][];
            /** Columns */
            columns: string[];
            /** Index */
            index?: unknown[] | null;
        };
        /** PieChartConfig */
        PieChartConfig: {
            /**
             * Names
             * @description Column name for sector names
             */
            names?: string | null;
            /**
             * Values
             * @description Column name for sector values
             */
            values?: string | null;
            /**
             * Color
             * @description Column name for color encoding
             */
            color?: string | null;
            /**
             * Facet Row
             * @description Column name for facet rows
             */
            facet_row?: string | null;
            /**
             * Facet Col
             * @description Column name for facet columns
             */
            facet_col?: string | null;
            /**
             * Facet Col Wrap
             * @description Maximum number of facet columns
             * @default 0
             */
            facet_col_wrap: number;
            /**
             * Facet Row Spacing
             * @description Spacing between facet rows
             */
            facet_row_spacing?: number | null;
            /**
             * Facet Col Spacing
             * @description Spacing between facet columns
             */
            facet_col_spacing?: number | null;
            /**
             * Color Discrete Sequence
             * @description Sequence of discrete colors
             */
            color_discrete_sequence?: string[] | null;
            /**
             * Color Discrete Map
             * @description Mapping of values to colors
             */
            color_discrete_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Hover Name
             * @description Column name for hover name
             */
            hover_name?: string | null;
            /**
             * Hover Data
             * @description Columns to show in hover tooltip
             */
            hover_data?: string[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Custom Data
             * @description Custom data columns
             */
            custom_data?: string[] | null;
            /**
             * Category Orders
             * @description Dictionary of category orders
             */
            category_orders?: {
                [key: string]: unknown;
            } | null;
            /**
             * Labels
             * @description Dictionary of labels
             */
            labels?: {
                [key: string]: unknown;
            } | null;
            /**
             * Title
             * @description Chart title
             */
            title?: string | null;
            /**
             * Subtitle
             * @description Chart subtitle
             */
            subtitle?: string | null;
            /**
             * Template
             * @description Plotly template
             */
            template?: string | null;
            /**
             * Width
             * @description Chart width in pixels
             */
            width?: number | null;
            /**
             * Height
             * @description Chart height in pixels
             */
            height?: number | null;
            /**
             * Opacity
             * @description Opacity of sectors
             */
            opacity?: number | null;
            /**
             * Hole
             * @description Fraction of radius to cut out (for donut chart)
             */
            hole?: number | null;
        };
        /** PlotlyFigure */
        PlotlyFigure: {
            /** Data */
            data: {
                [key: string]: unknown;
            }[];
            /** Layout */
            layout?: {
                [key: string]: unknown;
            } | null;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
        };
        /** SQLBaseDependencyCreateRequest */
        SQLBaseDependencyCreateRequest: {
            /**
             * Type
             * @enum {string}
             */
            type: "sqlite" | "postgres" | "mysql" | "mssql";
            /** Name */
            name: string;
            /** Host */
            host: string;
            /** Port */
            port: number;
            /** Database */
            database: string;
            /** Username */
            username: string;
            /** Password */
            password: string;
        };
        /** SQLBaseDependencyModel */
        SQLBaseDependencyModel: {
            /** Pk */
            pk?: string | null;
            /** Name */
            name: string;
            connection_params?: components["schemas"]["SQLConnectionParams"] | null;
            /** Tables */
            tables?: components["schemas"]["SQLDatabaseTable"][] | null;
            /** Table Subset */
            table_subset?: components["schemas"]["SQLDatabaseTable"][] | null;
            /** Column Names To Exclude */
            column_names_to_exclude?: string[] | null;
        } & {
            [key: string]: unknown;
        };
        /** SQLConnectionParams */
        SQLConnectionParams: {
            type: components["schemas"]["SQLType"];
            /** Host */
            host: string;
            /** Port */
            port: number;
            /** Username */
            username: string;
            /**
             * Encrypted Password
             * Format: binary
             */
            encrypted_password: string;
            /** Database */
            database: string;
        };
        /** SQLDatabaseTable */
        SQLDatabaseTable: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /** Table Name */
            table_name: string;
            /** Description */
            description: string | null;
            /** Comment */
            comment: string | null;
            /**
             * Columns
             * @default []
             */
            columns: components["schemas"]["SQLTableColumn"][];
        };
        /** SQLJoin */
        SQLJoin: {
            /** Table */
            table: string;
            /**
             * Table Id
             * Format: uuid
             */
            table_id: string;
            /** Column Key */
            column_key: string;
            /**
             * Column Id
             * Format: uuid
             */
            column_id: string;
        };
        /** SQLTableColumn */
        SQLTableColumn: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /**
             * Table Id
             * Format: uuid
             */
            table_id: string;
            /**
             * Exclude
             * @default false
             */
            exclude: boolean;
            /** Name */
            name: string;
            /** Key */
            key: string;
            /** Type */
            type?: string | null;
            /** Nullable */
            nullable?: boolean | null;
            /** Primary Key */
            primary_key?: boolean | null;
            /** Unique */
            unique?: boolean | null;
            /** Comment */
            comment?: string | null;
            join?: components["schemas"]["SQLJoin"] | null;
        };
        /**
         * SQLType
         * @enum {string}
         */
        SQLType: "mssql" | "mysql" | "postgres" | "sqlite";
        /** ScatterChartConfig */
        ScatterChartConfig: {
            /**
             * X
             * @description The column name(s) to use for the x-axis
             */
            x?: string | string[] | null;
            /**
             * Y
             * @description The column name(s) to use for the y-axis
             */
            y?: string | string[] | null;
            /**
             * Color
             * @description Column name for color encoding
             */
            color?: string | null;
            /**
             * Symbol
             * @description Column name for symbol encoding
             */
            symbol?: string | null;
            /**
             * Size
             * @description Column name for size encoding
             */
            size?: string | null;
            /**
             * Hover Name
             * @description Column name for hover name
             */
            hover_name?: string | null;
            /**
             * Hover Data
             * @description Columns to show in hover tooltip
             */
            hover_data?: string[] | {
                [key: string]: unknown;
            } | null;
            /**
             * Custom Data
             * @description Custom data columns
             */
            custom_data?: string[] | null;
            /**
             * Text
             * @description Column name for text labels
             */
            text?: string | null;
            /**
             * Facet Row
             * @description Column name for facet rows
             */
            facet_row?: string | null;
            /**
             * Facet Col
             * @description Column name for facet columns
             */
            facet_col?: string | null;
            /**
             * Facet Col Wrap
             * @description Maximum number of facet columns
             * @default 0
             */
            facet_col_wrap: number;
            /**
             * Facet Row Spacing
             * @description Spacing between facet rows
             */
            facet_row_spacing?: number | null;
            /**
             * Facet Col Spacing
             * @description Spacing between facet columns
             */
            facet_col_spacing?: number | null;
            /**
             * Error X
             * @description Column name for x error bars
             */
            error_x?: string | null;
            /**
             * Error X Minus
             * @description Column name for x error bars (minus)
             */
            error_x_minus?: string | null;
            /**
             * Error Y
             * @description Column name for y error bars
             */
            error_y?: string | null;
            /**
             * Error Y Minus
             * @description Column name for y error bars (minus)
             */
            error_y_minus?: string | null;
            /**
             * Animation Frame
             * @description Column name for animation frames
             */
            animation_frame?: string | null;
            /**
             * Animation Group
             * @description Column name for animation groups
             */
            animation_group?: string | null;
            /**
             * Category Orders
             * @description Dictionary of category orders
             */
            category_orders?: {
                [key: string]: unknown;
            } | null;
            /**
             * Labels
             * @description Dictionary of axis labels
             */
            labels?: {
                [key: string]: unknown;
            } | null;
            /**
             * Orientation
             * @description Orientation ('v' or 'h')
             */
            orientation?: string | null;
            /**
             * Color Discrete Sequence
             * @description Sequence of discrete colors
             */
            color_discrete_sequence?: string[] | null;
            /**
             * Color Discrete Map
             * @description Mapping of values to colors
             */
            color_discrete_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Color Continuous Scale
             * @description Continuous color scale
             */
            color_continuous_scale?: unknown[] | string | null;
            /**
             * Range Color
             * @description Range of color scale
             */
            range_color?: unknown[] | null;
            /**
             * Color Continuous Midpoint
             * @description Midpoint of color scale
             */
            color_continuous_midpoint?: number | null;
            /**
             * Symbol Sequence
             * @description Sequence of symbols
             */
            symbol_sequence?: string[] | null;
            /**
             * Symbol Map
             * @description Mapping of values to symbols
             */
            symbol_map?: {
                [key: string]: unknown;
            } | null;
            /**
             * Opacity
             * @description Opacity of markers
             */
            opacity?: number | null;
            /**
             * Size Max
             * @description Maximum marker size
             */
            size_max?: number | null;
            /**
             * Marginal X
             * @description Marginal plot type for x-axis
             */
            marginal_x?: string | null;
            /**
             * Marginal Y
             * @description Marginal plot type for y-axis
             */
            marginal_y?: string | null;
            /**
             * Trendline
             * @description Trendline type ('ols', 'lowess', etc.)
             */
            trendline?: string | null;
            /**
             * Trendline Options
             * @description Options for trendline
             */
            trendline_options?: {
                [key: string]: unknown;
            } | null;
            /**
             * Trendline Color Override
             * @description Color for trendline
             */
            trendline_color_override?: string | null;
            /**
             * Trendline Scope
             * @description Scope for trendline
             * @default trace
             */
            trendline_scope: string;
            /**
             * Log X
             * @description Use log scale for x-axis
             * @default false
             */
            log_x: boolean;
            /**
             * Log Y
             * @description Use log scale for y-axis
             * @default false
             */
            log_y: boolean;
            /**
             * Range X
             * @description Range for x-axis
             */
            range_x?: unknown[] | null;
            /**
             * Range Y
             * @description Range for y-axis
             */
            range_y?: unknown[] | null;
            /**
             * Render Mode
             * @description Render mode
             * @default auto
             */
            render_mode: string;
            /**
             * Title
             * @description Chart title
             */
            title?: string | null;
            /**
             * Subtitle
             * @description Chart subtitle
             */
            subtitle?: string | null;
            /**
             * Template
             * @description Plotly template
             */
            template?: string | null;
            /**
             * Width
             * @description Chart width in pixels
             */
            width?: number | null;
            /**
             * Height
             * @description Chart height in pixels
             */
            height?: number | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_dashboards_api_dashboard_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardConfigModel"][];
                };
            };
        };
    };
    create_dashboard_config_api_dashboard_config_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardConfigState-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardConfigModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    evaluate_dashboard_config_from_state_api_dashboard_config_evaluate_state_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardEvaluationRequest-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardEvaluationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_state_api_state__state_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                state_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_sql_dependencies_api_sql_dependency_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SQLBaseDependencyModel"][];
                };
            };
        };
    };
    create_sql_dependency_api_sql_dependency_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SQLBaseDependencyCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SQLBaseDependencyModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sql_dependency_api_sql_dependency__dependency_pk__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dependency_pk: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SQLBaseDependencyModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_agent__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
