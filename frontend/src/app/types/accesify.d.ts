/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/dashboard-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Dashboards */
        get: operations["get_dashboards_api_dashboard_config_get"];
        put?: never;
        /** Create Dashboard Config */
        post: operations["create_dashboard_config_api_dashboard_config_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/state/{state_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Agent State */
        get: operations["get_agent_state_api_state__state_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run Agent */
        post: operations["run_agent__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** DashboardConfig */
        "DashboardConfig-Input": {
            /** Title */
            title: string;
            dashboard_sql_query: components["schemas"]["DashboardSQLQuery"];
            dashboard_chart: components["schemas"]["DashboardPlotlyChartConfig"];
        };
        /** DashboardConfig */
        "DashboardConfig-Output": {
            /** Title */
            title: string;
            dashboard_sql_query: components["schemas"]["DashboardSQLQuery"];
            dashboard_chart: components["schemas"]["DashboardPlotlyChartConfig"];
        };
        /** DashboardConfigModel */
        DashboardConfigModel: {
            /** Title */
            title: string;
            dashboard_sql_query: components["schemas"]["DashboardSQLQuery"];
            dashboard_chart: components["schemas"]["DashboardPlotlyChartConfig"];
            /** Pk */
            pk?: string | null;
        } & {
            [key: string]: unknown;
        };
        /** DashboardPlotlyChartConfig */
        DashboardPlotlyChartConfig: {
            /**
             * Type
             * @description The type of the plotly chart, e.g. 'bar', 'line', 'scatter', etc.
             * @enum {string}
             */
            type: "bar" | "barpolar" | "box" | "candlestick" | "carpet" | "choropleth" | "choroplethmap" | "choroplethmapbox" | "cone" | "contour" | "contourcarpet" | "densitymap" | "densitymapbox" | "funnel" | "funnelarea" | "heatmap" | "histogram" | "histogram2d" | "histogram2dcontour" | "icicle" | "image" | "indicator" | "isosurface" | "mesh3d" | "ohlc" | "parcats" | "parcoords" | "pie" | "sankey" | "scatter" | "scatter3d" | "scattercarpet" | "scattergeo" | "scattergl" | "scattermap" | "scattermapbox" | "scatterpolar" | "scatterpolargl" | "scattersmith" | "scatterternary" | "splom" | "streamtube" | "sunburst" | "surface" | "table" | "treemap" | "violin" | "volume" | "waterfall";
            /**
             * X
             * @description The column name to use for the x-axis
             */
            x: string;
            /**
             * Y
             * @description The column name(s) to use for the y-axis
             */
            y: string | string[];
        };
        /** DashboardSQLQuery */
        DashboardSQLQuery: {
            /**
             * Parametrized Query
             * @description A parametrized SQL query with parameters in curly braces, e.g. SELECT * FROM table WHERE column = {parameter}
             */
            parametrized_query: string;
            /**
             * Dashboard Sql Query Parameters
             * @description A list of parameters used in the parametrized_query
             */
            dashboard_sql_query_parameters: components["schemas"]["DashboardSQLQueryParameter"][];
        };
        /** DashboardSQLQueryParameter */
        DashboardSQLQueryParameter: {
            /**
             * Name
             * @description The name of the parameter, e.g. 'parameter' for {parameter}
             */
            name: string;
            /**
             * Type
             * @description The type of the parameter, e.g. 'str', 'int', 'float', 'date', 'bool', 'datetime', or 'time'
             * @enum {string}
             */
            type: "str" | "int" | "float" | "date" | "bool" | "datetime" | "time";
            /**
             * Example Value
             * @description An example value for the parameter, e.g. 'example' for a str parameter
             */
            example_value: string | number | boolean;
        };
        /** DashboardState */
        DashboardState: {
            dashboard_config?: components["schemas"]["DashboardConfig-Output"] | null;
            test_dateframe?: components["schemas"]["PandasDataFrame"] | null;
            test_figure?: components["schemas"]["PlotlyFigure"] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PandasDataFrame */
        PandasDataFrame: {
            /** Data */
            data: unknown[][];
            /** Columns */
            columns: string[];
            /** Index */
            index?: unknown[] | null;
        };
        /** PlotlyFigure */
        PlotlyFigure: {
            /** Data */
            data: {
                [key: string]: unknown;
            }[];
            /** Layout */
            layout?: {
                [key: string]: unknown;
            } | null;
            /** Config */
            config?: {
                [key: string]: unknown;
            } | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_dashboards_api_dashboard_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardConfigModel"][];
                };
            };
        };
    };
    create_dashboard_config_api_dashboard_config_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardConfig-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardConfig-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_state_api_state__state_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                state_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_agent__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
