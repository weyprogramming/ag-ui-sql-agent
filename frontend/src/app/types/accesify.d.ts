/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/dashboard-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Dashboards */
        get: operations["get_dashboards_api_dashboard_config_get"];
        put?: never;
        /** Create Dashboard Config */
        post: operations["create_dashboard_config_api_dashboard_config_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/state/{state_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Agent State */
        get: operations["get_agent_state_api_state__state_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Run Agent */
        post: operations["run_agent__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** DashboardConfig */
        "DashboardConfig-Input": {
            /** Title */
            title: string;
            dashboard_sql_query: components["schemas"]["DashboardSQLQuery"];
        };
        /** DashboardConfig */
        "DashboardConfig-Output": {
            /** Title */
            title: string;
            dashboard_sql_query: components["schemas"]["DashboardSQLQuery"];
        };
        /** DashboardConfigModel */
        DashboardConfigModel: {
            /** Title */
            title: string;
            dashboard_sql_query: components["schemas"]["DashboardSQLQuery"];
            /** Pk */
            pk?: string | null;
        } & {
            [key: string]: unknown;
        };
        /** DashboardSQLQuery */
        DashboardSQLQuery: {
            /**
             * Parametrized Query
             * @description A parametrized SQL query with parameters in curly braces, e.g. SELECT * FROM table WHERE column = {parameter}
             */
            parametrized_query: string;
            /**
             * Dashboard Sql Query Parameters
             * @description A list of parameters used in the parametrized_query
             */
            dashboard_sql_query_parameters: components["schemas"]["DashboardSQLQueryParameter"][];
        };
        /** DashboardSQLQueryParameter */
        DashboardSQLQueryParameter: {
            /** Name */
            name: string;
            /**
             * Type
             * @enum {string}
             */
            type: "string" | "int" | "float" | "date" | "boolean";
        };
        /** DashboardState */
        DashboardState: {
            sql_dependency: components["schemas"]["SQLBaseDependency"];
            dashboard_config?: components["schemas"]["DashboardConfig-Output"] | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** SQLBaseDependency */
        SQLBaseDependency: {
            /** Name */
            name: string;
            connection_params: components["schemas"]["SQLConnectionParams"];
            /** Tables */
            tables?: components["schemas"]["SQLDatabaseTable"][] | null;
            /** Table Subset */
            table_subset?: components["schemas"]["SQLDatabaseTable"][] | null;
            /** Column Names To Exclude */
            column_names_to_exclude?: string[] | null;
        };
        /** SQLConnectionParams */
        SQLConnectionParams: {
            type: components["schemas"]["SQLType"];
            /** Host */
            host: string;
            /** Port */
            port: number;
            /** Username */
            username: string;
            /**
             * Encrypted Password
             * Format: binary
             */
            encrypted_password: string;
            /** Database */
            database: string;
            /** Password */
            readonly password: string;
        };
        /** SQLDatabaseTable */
        SQLDatabaseTable: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /** Table Name */
            table_name: string;
            /** Description */
            description: string | null;
            /** Comment */
            comment: string | null;
            /**
             * Columns
             * @default []
             */
            columns: components["schemas"]["SQLTableColumn"][];
        };
        /** SQLJoin */
        SQLJoin: {
            /** Table */
            table: string;
            /**
             * Table Id
             * Format: uuid
             */
            table_id: string;
            /** Column Key */
            column_key: string;
            /**
             * Column Id
             * Format: uuid
             */
            column_id: string;
        };
        /** SQLTableColumn */
        SQLTableColumn: {
            /**
             * Id
             * Format: uuid
             */
            id?: string;
            /**
             * Table Id
             * Format: uuid
             */
            table_id: string;
            /**
             * Exclude
             * @default false
             */
            exclude: boolean;
            /** Name */
            name: string;
            /** Key */
            key: string;
            /** Type */
            type?: string | null;
            /** Nullable */
            nullable?: boolean | null;
            /** Primary Key */
            primary_key?: boolean | null;
            /** Unique */
            unique?: boolean | null;
            /** Comment */
            comment?: string | null;
            join?: components["schemas"]["SQLJoin"] | null;
        };
        /**
         * SQLType
         * @enum {string}
         */
        SQLType: "mssql" | "mysql" | "postgres" | "sqlite";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_dashboards_api_dashboard_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardConfigModel"][];
                };
            };
        };
    };
    create_dashboard_config_api_dashboard_config_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DashboardConfig-Input"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardConfig-Output"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_agent_state_api_state__state_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                state_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DashboardState"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_agent__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
